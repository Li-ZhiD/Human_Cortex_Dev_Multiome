library(Signac)
library(Seurat)
library(EnsDb.Hsapiens.v86)
library(BSgenome.Hsapiens.UCSC.hg38)
library(GenomicRanges)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(biomaRt)
library(patchwork)

set.seed(1234)
wdir <- '/path/to/scenicplus/'
plot_dir <- '/path/to/scenicplus/plots/'
setwd(wdir)
color_file <- "/path/to/color_file.txt"
seu_file <- "/path/to/rds/integrated.rds"


lev <- as.data.frame(fread(color_file,sep="\t",header=T))
r2g_links <- read.table(paste0(work_dir, '/r2g.rho.bed'), sep = '\t', skip = 1,col.names = c('chrom', 'chromStart', 'chromEnd', 'name', 'score', 'value', 'exp',
                'color', 'sourceChrom', 'sourceStart', 'sourceEnd', 'sourceName','sourceStrand', 'targetChrom', 'targetStart', 'targetEnd', 'targetName','targetStrand'))

cell_index <-read.table("sketched_cell.index",sep="\t",header=T)$index
seu <- readRDS(seu_file)
DefaultAssay(seu) <- 'ATAC'
cell_metadata <- seu@meta.data[cell_index,]
rownames(cell_metadata) <- cell_metadata$ATAC_barcode

idents <- c("RG-vRG","EN-L4-IT","IN-MGE-PV")
color_dict  <- lev[idents,'color']
names(color_dict) <- idents
color_dict_eRegulons = c('TCF7L1_+_+' = 'Red','TCF7L2_+_+'='Pink','PRDM1_+_+'="Purple",  'SMAD3_+_+' = 'Green','GLIS1_+_+'='Grey',  'MAF_+_+' = 'Blue')
selected_eRegulons <- names(color_dict_eRegulons)
gene_to_region_of_interest = c('GAD2' = 'chr10-26215882-26438700','TESPA1' = 'chr12-54934762-55014762','SEMA5A' = 'chr3-122936059-123111559')

r2g_links <- transform(r2g_links, start_ = pmin(sourceStart, targetEnd))
r2g_links <- transform(r2g_links, end_ = pmax(sourceStart, targetEnd))
r2g_links <- r2g_links[c('chrom', 'start_', 'end_', 'targetName', 'value', 'chrom', 'chromStart', 'chromEnd')]
colnames(r2g_links) <- c('seqnames', 'start', 'end', 'gene', 'score', 'chrom', 'chromStart', 'chromEnd')
eRegulon_regions <- read.table(paste0(wdir, '/eRegulons.bed'), sep = '\t')
colnames(eRegulon_regions) <- c('seqnames', 'start', 'end', 'name')
eRegulon_regions <- subset(eRegulon_regions, name %in% selected_eRegulons)

genes <- genes(TxDb.Hsapiens.UCSC.hg38.knownGene)
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
bm <- getBM(attributes = c("external_gene_name",'entrezgene_id'), values=names(genes),filters ='entrezgene_id', mart = mart)
names(genes) <- bm$external_gene_name[match(genes$gene_id,bm$entrezgene_id)]
PR <- promoters(genes,downstream=30000,upstream = 30000)

for(gene in names(gene_to_region_of_interest)) {
  print(gene)
  region=as.character(gene_to_region_of_interest[gene])
  eRegulon_regions <- eRegulon_regions[eRegulon_regions[['name']] %in% selected_eRegulons, ]
  eRegulon_regions <- eRegulon_regions[order(eRegulon_regions$name), ]
  eRegulon_regions <- eRegulon_regions %>%
    group_by(seqnames, start, end) %>%
    mutate(name = paste0(name, collapse = ", "))
  gr_eRegulon_regions <- makeGRangesFromDataFrame(eRegulon_regions, keep.extra.columns = TRUE)
  r2g_links_gene <- r2g_links[r2g_links[['gene']] == gene, ]
  r2g_links_gr <- makeGRangesFromDataFrame(r2g_links_gene[c('seqnames', 'start', 'end', 'gene', 'score')], keep.extra.columns = TRUE)
  Links(seu) <- r2g_links_gr
  peak_plot <- PeakPlot(
    object = seu,
    region = region,
    peaks = gr_eRegulon_regions,
    group.by = 'name') & scale_fill_manual(values=color_dict_eRegulons)
  cov_plot <- CoveragePlot(
    object = seu,
    region = region,
    group.by = 'type',idents = idents,
    annotation = FALSE,
    peaks = FALSE,
    links=FALSE,
    bigwig.scale = 'separate')  & scale_fill_manual(values=color_dict)
  expr_plot <- ExpressionPlot(object = seu, features = c(gene), assay = 'SCT',group.by = 'type') & scale_fill_manual(values=color_dict)
  gene_plot <- AnnotationPlot(
    object = seu,
    region = region)
  link_plot <- LinkPlot(
    object = seu,
    region = region,
    min.cutoff = -1) + scale_colour_gradientn(colours = brewer.pal(n = 9, name = "Blues"), limits=c(0, NA))
  p <- CombineTracks(
    plotlist = list(cov_plot, peak_plot, link_plot, gene_plot),
    expression.plot = expr_plot,
    heights = c(5, 1, 1, 1),
    widths = c(10,4))
  pdf(paste0(plot_dir, paste0('/R_R2G_', gene, '_w_expr.pdf')))
  print(p)
  dev.off()
}
